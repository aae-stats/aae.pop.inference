% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inference.R
\name{inference}
\alias{inference}
\alias{is.inference}
\alias{print.inference}
\alias{summary.inference}
\alias{plot.inference}
\title{Estimate parameters of a simulation model with sequential
  approximate Bayesian computation}
\usage{
inference(model, prior, target, method = NULL, ...)

is.inference(x)

\method{print}{inference}(x, ...)

\method{summary}{inference}(object, ...)

\method{plot}{inference}(x, y, ..., which = NULL)
}
\arguments{
\item{model}{a function to simulate a population dynamics object
from a set of parameters. This function must return a
vector of summary statistics with the same length as \code{target}}

\item{prior}{a list of prior distributions for each parameter, specified
as described in
\code{\link[EasyABC:ABC_sequential]{EasyABC::ABC_sequential()}}.
Currently supported options are the uniform, normal, lognormal,
and exponential distributions, and each list element should be a
vector specifying the distribution ("unif", "normal", "lognormal",
or "exponential"), followed by one (for the exponential distribution)
or two parameters (all other distributions)}

\item{target}{values to be compared to model outputs simulated
with \code{model}}

\item{method}{sequential ABC method to use for sampling, see
\code{\link[EasyABC:ABC_sequential]{EasyABC::ABC_sequential()}} for
details}

\item{\dots}{additional arguments passed to the sequential ABC sampler
(see \code{\link[EasyABC:ABC_sequential]{EasyABC::ABC_sequential()}})}

\item{x}{output from \code{inference}}

\item{object}{output from \code{inference}}

\item{y}{ignored, included for consistency with generic plot method}

\item{which}{the parameter to plot, defaults to all estimated parameters}
}
\description{
Generic function to estimate parameters using sequential
  ABC, targeted specifically towards models implemented with the
  \code{\link[aae.pop:simulate]{aae.pop::simulate()}} function
  in the \code{aae.pop} package.
}
\details{
Approximate Bayesian computation is a fast method for parameter
  inference in cases where model likelihoods are intractable (or at
  least difficult to compute). The \code{inference} function is a wrapper
  for the \code{\link[EasyABC:ABC_sequential]{EasyABC::ABC_sequential()}}
  function intended to simplify parameter inference for population
  dynamics models created with
  \code{\link[aae.pop:dynamics]{aae.pop::dynamics()}}.

  Although standard MCMC algorithms are feasible for many of these models,
  the use of ABC allows fast and flexible specification of models based on
  existing simulation tools such as those in the \code{aae.pop} package.
}
\examples{
# use the tools in aae.pop to set up an example
library(aae.pop)

# setup: define a pop model to simulate and use in ABC
nclass <- 5
popmat <- matrix(0, ncol = nclass, nrow = nclass)
popmat[transition(popmat)] <- c(0.3, 0.5, 0.7, 0.8)
popmat[reproduction(popmat)] <- c(0, 1, 4, 10)
dd <- density_dependence(
  funs = ricker(100, exclude = 1),
  masks = reproduction(popmat)
)
pop_fn <- dynamics(matrix = popmat, dd)

# simulate some data from this model to use as a target data set
obs <- simulate(
  pop_fn,
  nsim = 100,
  args = list(density_dependence = list(theta = 0.4))
)

# define wrapper for a simulation from K and DD parameters
popsim_fn <- function(par) {

  tmp <- update(
    pop_fn,
    aae.pop::density_dependence(
      funs = aae.pop::ricker(par[1], exclude = 1),
      masks = aae.pop::reproduction(popmat)
    )
  )

  sim <- simulate(
    tmp,
    nsim = 10,
    args = list(density_dependence = list(theta = par[2]))
  )

  stat_abundance_trend(sim)

}

# and run it with uniform priors for both parameters (quick run,
#   nb_simul too low and p_acc_min too high for accurate results)
pars <- inference(
  model = popsim_fn,
  prior = list(
    c("unif", 50, 500),
    c("unif", 0.01, 1)
  ),
  target = target,
  nb_simul = 10,
  progress_bar = TRUE
)

# plot estimated parameters (not expected to be accurate)
plot(pars)
}
